import os, json, requests, secrets, re
from pathlib import Path
from datetime import timedelta

from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse, HttpResponseBadRequest, JsonResponse
from django.utils import timezone
from linebot import LineBotApi, WebhookParser, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage, FlexSendMessage, FollowEvent,
    ImageMessage, VideoMessage, AudioMessage, FileMessage,
    LocationMessage, StickerMessage, PostbackEvent
)
from user.models import LineProfile  # Á¢∫‰øùÈÄôÊòØ‰Ω†ÁöÑ LineProfile Ê®°Âûã
from .models import OneTimeBindCode, GroupBinding
from line_bot.utils import (
    send_quick_reply,
    send_courses_list,
    send_create_course_guide,
    send_course_binding_success_message,
    send_add_homework_guide,
    send_ask_question_guide,
    hash_code,
)
# FLEX_PATH = Path(__file__).resolve().parent / "flex_templates.json"

# with open(FLEX_PATH, encoding="utf8") as f:
#     FLEX = json.load(f)

# START_REGISTER_FLEX = FLEX["start_register"]
# REGISTER_DONE_FLEX = FLEX["register_done"]
# ‚îÄ‚îÄ LINE Channel Ë≥áË®ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CHANNEL_SECRET = os.getenv("CHANNEL_SECRET")
CHANNEL_TOKEN  = os.getenv("CHANNEL_TOKEN")


N8N_NLP_URL    = os.getenv("N8N_NLP_URL")

line_bot_api = LineBotApi(CHANNEL_TOKEN)
parser       = WebhookParser(CHANNEL_SECRET)

# ‚îÄ‚îÄ Flex Ë®≠ÂÆöÔºöÁ∞°ÂñÆÁõ¥Êé•ÂØ´Âú®Á®ãÂºèË£°Ôºõ‰πüÂèØÊîπËÆÄ JSON Ê™î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
START_REGISTER_FLEX = {
    "type": "bubble",
    "body": {
        "type": "box",
        "layout": "vertical",
        "contents": [
            {"type": "text", "text": "Ê≠°Ëøé‰ΩøÁî®Êô∫ËÉΩË™≤Á®ãÁÆ°ÁêÜÁ≥ªÁµ±ÔºÅ", "weight": "bold", "size": "lg"},
            {"type": "text", "text": "Èªû‰∏ãÊñπÊåâÈàïÈñãÂßãË®ªÂÜä", "size": "sm", "color": "#666666"}
        ]
    },
    "footer": {
        "type": "box",
        "layout": "vertical",
        "contents": [
            {
                "type": "button",
                "style": "primary",
                "action": {
                    "type": "uri",
                    "label": "ÈñãÂßãË®ªÂÜä",
                    "uri": f"https://liff.line.me/{os.getenv('VITE_LIFF_ID')}"
                }
            }
        ]
    }
}

def get_register_done_flex(name: str, role: str) -> dict:
    return {
        "type": "bubble",
        "body": {
            "type": "box",
            "layout": "vertical",
            "paddingAll": "0px",
            "backgroundColor": "#FFFFFF",
            "contents": [
                # È†ÇÈÉ®Êº∏Â±§ËÉåÊôØÂçÄÂüü
                {
                    "type": "box",
                    "layout": "vertical",
                    "paddingAll": "32px",
                    "paddingBottom": "24px",
                    "backgroundColor": "#4CAF50",
                    "contents": [
                        {
                            "type": "box",
                            "layout": "vertical",
                            "spacing": "md",
                            "alignItems": "center",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": "üéä",
                                    "size": "3xl",
                                    "align": "center"
                                },
                                {
                                    "type": "text",
                                    "text": "Ë®ªÂÜäÊàêÂäüÔºÅ",
                                    "size": "xl",
                                    "weight": "bold",
                                    "color": "#FFFFFF",
                                    "align": "center",
                                    "margin": "sm"
                                },
                                {
                                    "type": "text",
                                    "text": f"Ê≠°Ëøé {name} Âä†ÂÖ•ÊàëÂÄë",
                                    "size": "md",
                                    "color": "#E8F5E8",
                                    "align": "center",
                                    "wrap": True
                                }
                            ]
                        }
                    ]
                },
                # ÂÄã‰∫∫Ë≥áË®äÂç°Áâá
                {
                    "type": "box",
                    "layout": "vertical",
                    "paddingAll": "24px",
                    "contents": [
                        {
                            "type": "box",
                            "layout": "vertical",
                            "spacing": "lg",
                            "contents": [
                                # Áî®Êà∂Ë≥áË®äË°å
                                {
                                    "type": "box",
                                    "layout": "horizontal",
                                    "spacing": "md",
                                    "paddingAll": "16px",
                                    "backgroundColor": "#F8F9FA",
                                    "cornerRadius": "12px",
                                    "contents": [
                                        {
                                            "type": "box",
                                            "layout": "vertical",
                                            "flex": 0,
                                            "alignItems": "center",
                                            "justifyContent": "center",
                                            "contents": [
                                                {
                                                    "type": "text",
                                                    "text": "üë§" if role != 'teacher' else "üë®‚Äçüè´",
                                                    "size": "xl"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "box",
                                            "layout": "vertical",
                                            "flex": 1,
                                            "spacing": "xs",
                                            "contents": [
                                                {
                                                    "type": "text",
                                                    "text": "Ë∫´‰ªΩÈ°ûÂûã",
                                                    "size": "xs",
                                                    "color": "#6C757D",
                                                    "weight": "bold"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": f"{'üéì ÊïôÂ∏´' if role == 'teacher' else 'üìö Â≠∏Áîü'}",
                                                    "size": "lg",
                                                    "weight": "bold",
                                                    "color": "#4CAF50"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                # ÁãÄÊÖãÊåáÁ§∫Âô®
                                {
                                    "type": "box",
                                    "layout": "horizontal",
                                    "spacing": "sm",
                                    "paddingAll": "12px",
                                    "backgroundColor": "#E8F5E8",
                                    "cornerRadius": "8px",
                                    "contents": [
                                        {
                                            "type": "text",
                                            "text": "‚úÖ",
                                            "flex": 0,
                                            "size": "sm"
                                        },
                                        {
                                            "type": "text",
                                            "text": "Â∏≥ËôüÁ∂ÅÂÆöÂÆåÊàê",
                                            "flex": 1,
                                            "size": "sm",
                                            "color": "#2E7D32",
                                            "weight": "bold"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                # ÂàÜÈöîÁ∑ö
                {
                    "type": "separator",
                    "color": "#E9ECEF",
                    "margin": "none"
                },
                # ‰∏ã‰∏ÄÊ≠•ÊåáÂºï
                {
                    "type": "box",
                    "layout": "vertical",
                    "paddingAll": "24px",
                    "spacing": "md",
                    "contents": [
                        {
                            "type": "text",
                            "text": "üöÄ Ê∫ñÂÇôÈñãÂßã‰ΩøÁî®",
                            "size": "md",
                            "weight": "bold",
                            "color": "#343A40",
                            "align": "center"
                        },
                        {
                            "type": "box",
                            "layout": "vertical",
                            "spacing": "sm",
                            "paddingTop": "sm",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": "üí¨ Ëº∏ÂÖ•„ÄåÂª∫Á´ã‰ΩúÊ•≠ ...„ÄçÈñãÂßã‰ΩøÁî®",
                                    "size": "sm",
                                    "color": "#6C757D",
                                    "align": "center",
                                    "wrap": True
                                },
                                {
                                    "type": "text",
                                    "text": "üìã ÊàñËº∏ÂÖ•„ÄåÂπ´Âä©„ÄçÊü•ÁúãÂÆåÊï¥ÂäüËÉΩ",
                                    "size": "xs",
                                    "color": "#ADB5BD",
                                    "align": "center",
                                    "wrap": True,
                                    "margin": "xs"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }





# ‚îÄ‚îÄ Webhook View (callback) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@csrf_exempt
def callback(request):
    signature = request.headers.get("X-Line-Signature")
    body      = request.body.decode("utf-8")

    try:
        events = parser.parse(body, signature)
    except InvalidSignatureError:
        return HttpResponseBadRequest("Invalid signature")

    for ev in events:
        # ============ 1. Âä†Â•ΩÂèã ‚Üí Êé®Ë®ªÂÜä ==============
        if isinstance(ev, FollowEvent):
            line_bot_api.reply_message(
                ev.reply_token,
                FlexSendMessage(alt_text="ÈñãÂßãË®ªÂÜä", contents=START_REGISTER_FLEX)
            )

        # ============ 2. Postback ‰∫ã‰ª∂ ==============
        elif isinstance(ev, PostbackEvent):
            line_user_id = ev.source.user_id
            postback_data = ev.postback.data
            
            # ËôïÁêÜË™≤Á®ãÈÅ∏Êìá
            if postback_data.startswith("course:"):
                course_id = postback_data.split(":")[1]
                # ÈÄôË£°ÂèØ‰ª•Ê†πÊìö course_id ÂÅöÈÄ≤‰∏ÄÊ≠•ËôïÁêÜ
                # ‰æãÂ¶ÇÁôºÈÄÅË™≤Á®ãË©≥Á¥∞Ë≥áË®äÊàñÊèê‰æõË™≤Á®ãÁõ∏ÈóúÁöÑÈÅ∏È†Ö
                pass

        # ============ 3. ÊâÄÊúâË®äÊÅØ‰∫ã‰ª∂ ==============
        elif isinstance(ev, MessageEvent):
            # ÂçÄÂàÜÁßÅËÅä / Áæ§ÁµÑÔºõÁæ§ÁµÑË®äÊÅØ‰∏çÈÄÅÂà∞ n8n
            source_type = getattr(ev.source, "type", None)
            is_group = (source_type == "group") or hasattr(ev.source, "group_id")
            group_id = getattr(ev.source, "group_id", None)
            line_user_id = getattr(ev.source, "user_id", None)

            # ÂÉÖËôïÁêÜÊñáÂ≠óË®äÊÅØ‰ΩúÁÇ∫Á∂ÅÂÆöÁ¢ºÔºàÁæ§ÁµÑÔºâ
            if is_group and isinstance(ev.message, TextMessage):
                user_text_raw = ev.message.text or ""
                user_text = user_text_raw.strip().upper()

                # Â∞ãÊâæ 6 Á¢ºÁ∂ÅÂÆöÁ¢ºÔºàÈÅøÂÖç I O 1 0Ôºâ
                match = re.search(r"\b([A-HJ-NP-Z2-9]{6})\b", user_text)
                if match:
                    code = match.group(1)
                    code_hash_value = hash_code(code)
                    bind_obj = OneTimeBindCode.objects.filter(code_hash=code_hash_value).order_by("-created_at").first()
                    if bind_obj and bind_obj.is_valid():
                        existing = GroupBinding.objects.filter(group_id=group_id).first()
                        if existing:
                            if existing.course_id == bind_obj.course_id:
                                # Â∑≤Á∂ìÁ∂ÅÂÆöÂêå‰∏ÄÈñÄË™≤ÔºåÊèêÁ§∫Âç≥ÂèØÔºå‰∏çÊ∂àËÄóÁ∂ÅÂÆöÁ¢º
                                line_bot_api.reply_message(
                                    ev.reply_token,
                                    TextSendMessage(text=f"‚ÑπÔ∏è Êú¨Áæ§Â∑≤Á∂ÅÂÆöË™≤Á®ã {existing.course_id}")
                                )
                            else:
                                # Â∑≤Á∂ÅÂÖ∂‰ªñË™≤Á®ãÔºåÁ¶ÅÊ≠¢Êõ¥Êèõ
                                line_bot_api.reply_message(
                                    ev.reply_token,
                                    TextSendMessage(text=f"‚ùå Êú¨Áæ§Â∑≤Á∂ÅÂÆöÂÖ∂‰ªñË™≤Á®ã {existing.course_id}ÔºåÂ¶ÇÈúÄÊõ¥ÊèõË´ãÂÖàËß£Èô§Á∂ÅÂÆö")
                                )
                        else:
                            # Âª∫Á´ãÁ∂ÅÂÆö‰∏¶Ê∂àËÄóÁ∂ÅÂÆöÁ¢º
                            GroupBinding.objects.create(
                                group_id=group_id,
                                course_id=bind_obj.course_id,
                                bound_by_line_user_id=line_user_id or "",
                            )
                            bind_obj.used = True
                            bind_obj.save(update_fields=["used"])

                            line_bot_api.reply_message(
                                ev.reply_token,
                                TextSendMessage(text=f"‚úÖ Áæ§ÁµÑÂ∑≤Á∂ÅÂÆöË™≤Á®ã {bind_obj.course_id}")
                            )
                            
                            # ÁôºÈÄÅÁæéËßÄÁöÑË™≤Á®ãÁ∂ÅÂÆöÊàêÂäü Flex Message
                            try:
                                send_course_binding_success_message(group_id, bind_obj.course_id, line_user_id or "")
                            except Exception as e:
                                print(f"ÁôºÈÄÅË™≤Á®ãÁ∂ÅÂÆö Flex Message Â§±Êïó: {e}")
                    else:
                        line_bot_api.reply_message(
                            ev.reply_token,
                            TextSendMessage(text="‚ùå Á∂ÅÂÆöÁ¢ºÁÑ°ÊïàÊàñÂ∑≤ÈÅéÊúü")
                        )
                # ‰∏çË´ñÊòØÂê¶ÂåπÈÖçÂà∞Á∂ÅÂÆöÁ¢ºÔºåÁæ§ÁµÑË®äÊÅØÈÉΩ‰∏çÈÄÅ n8n
                continue

            # ÁßÅËÅäÔºöÊâçÈÄÅÂà∞ n8n
            if not is_group:
                # ÊúÉÂì°Ê™¢Êü•ÔºàÂÉÖÁßÅËÅäÊôÇÔºâ
                if not LineProfile.objects.filter(line_user_id=line_user_id).exists():
                    line_bot_api.reply_message(
                        ev.reply_token,
                        FlexSendMessage(alt_text="ÈñãÂßãË®ªÂÜä", contents=START_REGISTER_FLEX)
                    )
                    continue

                # ÂèñËßíËâ≤
                role = (
                    LineProfile.objects
                    .filter(line_user_id=line_user_id)
                    .values_list("role", flat=True)
                    .first()
                ) or "unknown"

                # Ë®äÊÅØÊëòË¶Å
                if isinstance(ev.message, TextMessage):
                    user_text = ev.message.text.strip()
                    message_type = "text"
                    message_content = user_text
                    # È°ØÁ§∫ËºâÂÖ•ÂãïÁï´ÔºàÂèØÂøΩÁï•Â§±ÊïóÔºâ
                    try:
                        requests.post(
                            url="https://api.line.me/v2/bot/chat/loading/start",
                            headers={
                                "Content-Type": "application/json",
                                "Authorization": f"Bearer {CHANNEL_TOKEN}"
                            },
                            json={
                                "chatId": line_user_id,
                                "loadingSeconds": 30
                            },
                            timeout=2
                        )
                    except requests.exceptions.RequestException:
                        pass
                elif isinstance(ev.message, ImageMessage):
                    message_type = "image"
                    message_content = "Êî∂Âà∞ÂúñÁâáË®äÊÅØ"
                elif isinstance(ev.message, VideoMessage):
                    message_type = "video"
                    message_content = "Êî∂Âà∞ÂΩ±ÁâáË®äÊÅØ"
                elif isinstance(ev.message, AudioMessage):
                    message_type = "audio"
                    message_content = "Êî∂Âà∞Ë™ûÈü≥Ë®äÊÅØ"
                elif isinstance(ev.message, FileMessage):
                    message_type = "file"
                    message_content = "Êî∂Âà∞Ê™îÊ°àË®äÊÅØ"
                elif isinstance(ev.message, LocationMessage):
                    message_type = "location"
                    message_content = "Êî∂Âà∞‰ΩçÁΩÆË®äÊÅØ"
                elif isinstance(ev.message, StickerMessage):
                    message_type = "sticker"
                    message_content = "Êî∂Âà∞Ë≤ºÂúñË®äÊÅØ"
                else:
                    message_type = "unknown"
                    message_content = "Êî∂Âà∞Êú™Áü•È°ûÂûãË®äÊÅØ"

                # ÈÄÅÂà∞ n8n
                payload = {
                    "lineUserId": line_user_id,
                    "rawText": message_content,
                    "role": role,
                    "messageType": message_type,
                    "messageId": getattr(ev.message, "id", None),
                }
                try:
                    requests.post(N8N_NLP_URL, json=payload, timeout=5)
                except requests.exceptions.RequestException:
                    line_bot_api.reply_message(
                        ev.reply_token,
                        FlexSendMessage(
                            alt_text="Á≥ªÁµ±ÂøôÁ¢å",
                            contents={
                                "type": "bubble",
                                "body": {
                                    "type": "box",
                                    "layout": "vertical",
                                    "contents": [
                                        {"type": "text", "text": "Á≥ªÁµ±ÂøôÁ¢å‰∏≠ÔºåË´ãÁ®çÂæåÂÜçË©¶ üôè", "wrap": True}
                                    ]
                                }
                            }
                        )
                    )
                # ÂÆåÊàêÁßÅËÅäËôïÁêÜ
                continue

    return HttpResponse("OK", status=200)

# ===== Á∂ÅÂÆöÂÆåÊàêÊé®Êí≠Ôºàgoogle_callback Áî®Ôºâ============================
def push_finish(line_user_id: str):
    try:
        profile = LineProfile.objects.get(pk=line_user_id)
        flex    = get_register_done_flex(profile.name, profile.role)
    except LineProfile.DoesNotExist:
        flex    = get_register_done_flex("‰ΩøÁî®ËÄÖ", "student")

    line_bot_api.push_message(
        line_user_id,
        FlexSendMessage(alt_text="Á∂ÅÂÆöÂÆåÊàê", contents=flex)
    )


# ====== Internal APIs ======================================================

# Áî¢Áîü‰∏ÄÊ¨°ÊÄßÁ∂ÅÂÆöÁ¢ºÔºàÂÉÖÂõûÂÇ≥ÊòéÁ¢ºÔºõË≥áÊñôÂ∫´Âè™Â≠òÈõúÊπäÔºâ
@csrf_exempt
def api_create_bind_code(request):
    if request.method != "POST":
        return JsonResponse({"error": "method_not_allowed"}, status=405)

    try:
        data = json.loads(request.body.decode("utf-8")) if request.body else {}
    except json.JSONDecodeError:
        return JsonResponse({"error": "invalid_json"}, status=400)

    course_id = (data.get("course_id") or "").strip()
    line_user_id = (data.get("line_user_id") or "").strip()
    ttl_minutes = int(data.get("ttl_minutes") or 10)

    if not course_id or not line_user_id:
        return JsonResponse({"error": "missing course_id / line_user_id"}, status=400)

    # Áî¢Áîü‰∏çÊòìÊ∑∑Ê∑ÜÁöÑ 6 Á¢º
    alphabet = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
    plain_code = "".join(secrets.choice(alphabet) for _ in range(6))
    code_hash_value = hash_code(plain_code)

    # Á¢∫‰øùÂîØ‰∏ÄÔºàÊ•µ‰ΩéÊ©üÁéáÁ¢∞ÊíûÔºâ
    for _ in range(5):
        if not OneTimeBindCode.objects.filter(code_hash=code_hash_value).exists():
            break
        plain_code = "".join(secrets.choice(alphabet) for _ in range(6))
        code_hash_value = hash_code(plain_code)

    expires_at = timezone.now() + timedelta(minutes=max(ttl_minutes, 1))

    OneTimeBindCode.objects.create(
        code_hash=code_hash_value,
        course_id=course_id,
        created_by_line_user_id=line_user_id,
        expires_at=expires_at,
        used=False,
    )

    return JsonResponse({
        "code": plain_code,
        "course_id": course_id,
        "expires_at": expires_at.isoformat(),
    })


# Á∞°ÂñÆÊé®Êí≠ APIÔºàto ÂèØ‰ª•ÊòØ‰ΩøÁî®ËÄÖÊàñÁæ§ÁµÑ IDÔºâ
@csrf_exempt
def api_line_push(request):
    if request.method != "POST":
        return JsonResponse({"error": "method_not_allowed"}, status=405)

    try:
        data = json.loads(request.body.decode("utf-8")) if request.body else {}
    except json.JSONDecodeError:
        return JsonResponse({"error": "invalid_json"}, status=400)

    to = (data.get("to") or "").strip()
    text = (data.get("text") or "").strip()
    if not to or not text:
        return JsonResponse({"error": "missing to / text"}, status=400)

    try:
        line_bot_api.push_message(to, TextSendMessage(text=text))
        return JsonResponse({"ok": True})
    except Exception as e:
        return JsonResponse({"ok": False, "error": str(e)}, status=500)


# Áæ§ÁµÑÁ∂ÅÂÆöÁÆ°ÁêÜÔºöGET Êü•Ë©¢„ÄÅPOST Âª∫Á´ã/Êõ¥Êñ∞
@csrf_exempt
def api_group_bindings(request):
    if request.method == "GET":
        group_id = (request.GET.get("group_id") or "").strip()
        if not group_id:
            return JsonResponse({"error": "missing group_id"}, status=400)
        obj = GroupBinding.objects.filter(group_id=group_id).first()
        if not obj:
            return JsonResponse({"found": False}, status=404)
        return JsonResponse({
            "found": True,
            "group_id": obj.group_id,
            "course_id": obj.course_id,
            "bound_by_line_user_id": obj.bound_by_line_user_id,
            "bound_at": obj.bound_at.isoformat(),
        })

    if request.method == "POST":
        try:
            data = json.loads(request.body.decode("utf-8")) if request.body else {}
        except json.JSONDecodeError:
            return JsonResponse({"error": "invalid_json"}, status=400)

        group_id = (data.get("group_id") or "").strip()
        course_id = (data.get("course_id") or "").strip()
        line_user_id = (data.get("line_user_id") or "").strip()
        if not group_id or not course_id or not line_user_id:
            return JsonResponse({"error": "missing group_id / course_id / line_user_id"}, status=400)

        existing = GroupBinding.objects.filter(group_id=group_id).first()
        if existing:
            if existing.course_id != course_id:
                return JsonResponse({
                    "error": "already_bound_other_course",
                    "message": f"Êú¨Áæ§Â∑≤Á∂ÅÂÆöË™≤Á®ã {existing.course_id}ÔºåË´ãÂÖàËß£Èô§Á∂ÅÂÆöÂÜçÊõ¥Êèõ",
                }, status=409)
            # Â∑≤Á∂ÅÁõ∏ÂêåË™≤Á®ãÔºåË¶ñÁÇ∫ÂÜ™Á≠â
            obj = existing
        else:
            obj = GroupBinding.objects.create(
                group_id=group_id,
                course_id=course_id,
                bound_by_line_user_id=line_user_id,
            )
        return JsonResponse({
            "group_id": obj.group_id,
            "course_id": obj.course_id,
            "bound_by_line_user_id": obj.bound_by_line_user_id,
            "bound_at": obj.bound_at.isoformat(),
        })

    return JsonResponse({"error": "method_not_allowed"}, status=405)