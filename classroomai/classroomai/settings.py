"""
Django settings for classroomai project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# settings.py
import os, dotenv, pathlib
from pathlib import Path

# Configure PyMySQL as MySQL client
import pymysql
pymysql.install_as_MySQLdb()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = pathlib.Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
dotenv.load_dotenv(BASE_DIR / ".env")

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    'rest_framework',
    'django_celery_beat',  # Celery Beat for scheduled tasks
    'django_celery_results',  # Celery Results for database backend
    'user',  # Assuming 'user' is the app name where models and serializers are defined
    'line_bot',  # Assuming 'line_bot' is the app for LINE bot integration
    'course',  # Assuming 'course' is the app for course management
    'api_v2',  # New API v2 app for enhanced functionality
]

CSRF_TRUSTED_ORIGINS = [
    'https://592c801f6e6f.ngrok-free.app',
    'http://localhost:3000',
    'http://localhost:8000',
    'http://127.0.0.1:3000',
    'http://127.0.0.1:8000',
    'https://coursemanagement0929.vercel.app',
    'https://coursemanagement01.vercel.app',
    # Please add your Vercel frontend URL here, for example: 'https://your-project-name.vercel.app'
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "line_bot.middleware.LineRoleMiddleware",
]


CORS_ALLOW_ALL_ORIGINS = True if DEBUG else False
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https?://.*\.vercel\.app$",
    r"^http://localhost:3000$",
    r"^http://127\.0\.0\.1:3000$",
    r"^https?://.*\.ngrok-free\.app$",
]

# 明確指定允許的 headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-line-user-id',
    'ngrok-skip-browser-warning',
]

CORS_ALLOW_CREDENTIALS = True        # Allow credentials for development; adjust in production

# Session 設定 - 確保 CSRF token 能正確工作
SESSION_COOKIE_SECURE = False  # 開發環境設為 False，生產環境設為 True
SESSION_COOKIE_HTTPONLY = False  # 讓 JavaScript 可以讀取 cookie
SESSION_COOKIE_SAMESITE = 'Lax'  # 允許跨域 CSRF
SESSION_COOKIE_AGE = 3600  # 1 小時

# CSRF Cookie 設定
CSRF_COOKIE_SECURE = False  # 開發環境設為 False，生產環境設為 True
CSRF_COOKIE_HTTPONLY = False  # 讓 JavaScript 可以讀取
CSRF_COOKIE_SAMESITE = 'Lax'  # 允許跨域 CSRF
# 使用 Cookie 型 CSRF 驗證，配合前端從 csrftoken 讀取並以 X-CSRFToken 送出
CSRF_USE_SESSIONS = False

ROOT_URLCONF = 'classroomai.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],  # Adjust if you have custom templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'classroomai.wsgi.application'

# 避免對無尾斜線的 POST/GET 進行 301/308 自動轉址，配合前端 rewrites，防止重導迴圈
APPEND_SLASH = False


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 資料庫設定 - 優先使用環境變數，否則使用 SQLite 進行開發
if os.getenv("DB_HOST"):
    # 使用 MySQL（生產環境）
    DATABASES = {
        "default": {
            "ENGINE":"django.db.backends.mysql",
            "NAME":os.getenv("DB_NAME", "classroomai"),
            "USER":os.getenv("DB_USER", "root"),
            "PASSWORD":os.getenv("DB_PASSWORD", ""),
            "HOST":os.getenv("DB_HOST"),
            "PORT":os.getenv("DB_PORT", "3306"),
            "OPTIONS":{
                "charset":"utf8mb4",
                "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            },
            # 連線池設定，減少連線開銷
            "CONN_MAX_AGE": 600,  # 連線保持 10 分鐘
        }
    }
else:
    # 使用 SQLite（開發環境）
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
            # SQLite 也可以使用連線池
            "CONN_MAX_AGE": 600,
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-hant'

TIME_ZONE = 'Asia/Taipei'

USE_I18N = True

USE_TZ = True

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django.log'),
            'encoding': 'utf-8',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django_errors.log'),
            'encoding': 'utf-8',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'formatters': {
        'simple': {
            'format': '%(asctime)s %(levelname)s %(message)s',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'error_file', 'console'],
            'level': 'INFO',  # 降低console的log級別，避免SQL debug輸出
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['file'],  # 資料庫相關log只輸出到檔案
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

OAUTH_TOKEN_SECRET = 'bQtB4Sl8Wy2H-voi8-5d6dGK73tHCQZI2_nG1naiPzI='

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 上傳大小上限（保險）
# 單一檔案最大 20 MB，單次請求最大 50 MB（可視情況調整）
DATA_UPLOAD_MAX_MEMORY_SIZE = int(os.getenv('DATA_UPLOAD_MAX_MEMORY_SIZE', 50 * 1024 * 1024))
FILE_UPLOAD_MAX_MEMORY_SIZE = int(os.getenv('FILE_UPLOAD_MAX_MEMORY_SIZE', 20 * 1024 * 1024))


GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET")
GOOGLE_REDIRECT_URI = os.getenv("GOOGLE_REDIRECT_URI")        # https://your-domain/api/oauth/google/callback/
VITE_LIFF_ID = os.getenv("VITE_LIFF_ID")   
CHANNEL_SECRET = os.getenv("CHANNEL_SECRET")
CHANNEL_TOKEN = os.getenv("CHANNEL_TOKEN")
LINE_CHANNEL_ID = os.getenv("LINE_CHANNEL_ID")          # Channel ID (注意不是 liffId)
LINE_ISSUER = "https://access.line.me"
REGISTRATION_COOLDOWN_MINUTES = 1
N8N_NLP_URL = os.getenv("N8N_NLP_URL")
INTERNAL_API_TOKEN = os.getenv("INTERNAL_API_TOKEN")


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'api_v2.authentication.LineUserAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# API 版本和環境設定
VERSION = '1.0.0'
ENVIRONMENT = os.getenv('DJANGO_ENVIRONMENT', 'development')

# Celery 配置 - 使用 Django 資料庫作為消息代理（開發環境）
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'django-db')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'django-db')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Taipei'
CELERY_ENABLE_UTC = True
CELERY_CACHE_BACKEND = 'django-cache'

# Celery Beat 配置（定時任務）
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# 任務路由配置
CELERY_TASK_ROUTES = {
    'services.tasks.auto_sync_classroom_for_all_users': {'queue': 'sync'},
    'services.tasks.auto_sync_calendar_for_all_users': {'queue': 'sync'},
    'services.tasks.cleanup_expired_cache': {'queue': 'maintenance'},
    'services.tasks.sync_user_data': {'queue': 'sync'},
}

# Celery Beat 定時任務排程（可選，也可以在 Django Admin 設定）
from celery.schedules import crontab
CELERY_BEAT_SCHEDULE = {
    # 每天早上 7 點自動同步 Google Classroom
    'auto-sync-classroom-daily': {
        'task': 'services.tasks.auto_sync_classroom_for_all_users',
        'schedule': crontab(hour=7, minute=0),
        'options': {'expires': 3600}  # 1 小時後過期
    },
    # 每天早上 7 點自動同步 Google Calendar
    'auto-sync-calendar-daily': {
        'task': 'services.tasks.auto_sync_calendar_for_all_users',
        'schedule': crontab(hour=7, minute=0),
        'options': {'expires': 3600}
    },
    # 每天凌晨 2 點清理過期快取
    'cleanup-cache-daily': {
        'task': 'services.tasks.cleanup_expired_cache',
        'schedule': crontab(hour=2, minute=0),
        'options': {'expires': 3600}
    },
}